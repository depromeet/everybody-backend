// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/depromeet/everybody-backend/rest-api/ent/album"
	"github.com/depromeet/everybody-backend/rest-api/ent/picture"
)

// Picture is the model entity for the Picture schema.
type Picture struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BodyParts holds the value of the "body_parts" field.
	BodyParts string `json:"body_parts,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PictureQuery when eager-loading is set.
	Edges         PictureEdges `json:"edges"`
	album_picture *int
}

// PictureEdges holds the relations/edges for other nodes in the graph.
type PictureEdges struct {
	// Album holds the value of the album edge.
	Album *Album `json:"album,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AlbumOrErr returns the Album value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PictureEdges) AlbumOrErr() (*Album, error) {
	if e.loadedTypes[0] {
		if e.Album == nil {
			// The edge album was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: album.Label}
		}
		return e.Album, nil
	}
	return nil, &NotLoadedError{edge: "album"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Picture) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case picture.FieldID:
			values[i] = new(sql.NullInt64)
		case picture.FieldBodyParts:
			values[i] = new(sql.NullString)
		case picture.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case picture.ForeignKeys[0]: // album_picture
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Picture", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Picture fields.
func (pi *Picture) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case picture.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case picture.FieldBodyParts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body_parts", values[i])
			} else if value.Valid {
				pi.BodyParts = value.String
			}
		case picture.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case picture.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field album_picture", value)
			} else if value.Valid {
				pi.album_picture = new(int)
				*pi.album_picture = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAlbum queries the "album" edge of the Picture entity.
func (pi *Picture) QueryAlbum() *AlbumQuery {
	return (&PictureClient{config: pi.config}).QueryAlbum(pi)
}

// Update returns a builder for updating this Picture.
// Note that you need to call Picture.Unwrap() before calling this method if this Picture
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *Picture) Update() *PictureUpdateOne {
	return (&PictureClient{config: pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the Picture entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *Picture) Unwrap() *Picture {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: Picture is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *Picture) String() string {
	var builder strings.Builder
	builder.WriteString("Picture(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteString(", body_parts=")
	builder.WriteString(pi.BodyParts)
	builder.WriteString(", created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pictures is a parsable slice of Picture.
type Pictures []*Picture

func (pi Pictures) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
