// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// EdgeNotificationConfig holds the string denoting the notification_config edge name in mutations.
	EdgeNotificationConfig = "notification_config"
	// EdgeAlbum holds the string denoting the album edge name in mutations.
	EdgeAlbum = "album"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "devices"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "user_device"
	// NotificationConfigTable is the table that holds the notification_config relation/edge.
	NotificationConfigTable = "notification_configs"
	// NotificationConfigInverseTable is the table name for the NotificationConfig entity.
	// It exists in this package in order to avoid circular dependency with the "notificationconfig" package.
	NotificationConfigInverseTable = "notification_configs"
	// NotificationConfigColumn is the table column denoting the notification_config relation/edge.
	NotificationConfigColumn = "user_notification_config"
	// AlbumTable is the table that holds the album relation/edge.
	AlbumTable = "albums"
	// AlbumInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumInverseTable = "albums"
	// AlbumColumn is the table column denoting the album relation/edge.
	AlbumColumn = "user_album"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldNickname,
	FieldHeight,
	FieldWeight,
	FieldType,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSIMPLE Type = "SIMPLE"
	TypeKAKAO  Type = "KAKAO"
	TypeAPPLE  Type = "APPLE"
	TypeNAVER  Type = "NAVER"
	TypeGOOGLE Type = "GOOGLE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSIMPLE, TypeKAKAO, TypeAPPLE, TypeNAVER, TypeGOOGLE:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}
