// Code generated by entc, DO NOT EDIT.

package device

import (
	"fmt"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeviceToken holds the string denoting the device_token field in the database.
	FieldDeviceToken = "device_token"
	// FieldPushToken holds the string denoting the push_token field in the database.
	FieldPushToken = "push_token"
	// FieldDeviceOs holds the string denoting the device_os field in the database.
	FieldDeviceOs = "device_os"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "devices"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_device"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldDeviceToken,
	FieldPushToken,
	FieldDeviceOs,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "devices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_device",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DeviceOs defines the type for the "device_os" enum field.
type DeviceOs string

// DeviceOs values.
const (
	DeviceOsANDROID DeviceOs = "ANDROID"
	DeviceOsIOS     DeviceOs = "IOS"
)

func (do DeviceOs) String() string {
	return string(do)
}

// DeviceOsValidator is a validator for the "device_os" field enum values. It is called by the builders before save.
func DeviceOsValidator(do DeviceOs) error {
	switch do {
	case DeviceOsANDROID, DeviceOsIOS:
		return nil
	default:
		return fmt.Errorf("device: invalid enum value for device_os field: %q", do)
	}
}
