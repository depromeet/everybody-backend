// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/depromeet/everybody-backend/rest-api/ent/notificationconfig"
	"github.com/depromeet/everybody-backend/rest-api/ent/user"
)

// NotificationConfig is the model entity for the NotificationConfig schema.
type NotificationConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Monday holds the value of the "monday" field.
	Monday bool `json:"monday,omitempty"`
	// Tuesday holds the value of the "tuesday" field.
	Tuesday bool `json:"tuesday,omitempty"`
	// Wednesday holds the value of the "wednesday" field.
	Wednesday bool `json:"wednesday,omitempty"`
	// Thursday holds the value of the "thursday" field.
	Thursday bool `json:"thursday,omitempty"`
	// Friday holds the value of the "friday" field.
	Friday bool `json:"friday,omitempty"`
	// Saturday holds the value of the "saturday" field.
	Saturday bool `json:"saturday,omitempty"`
	// Sunday holds the value of the "sunday" field.
	Sunday bool `json:"sunday,omitempty"`
	// PreferredTimeHour holds the value of the "preferred_time_hour" field.
	PreferredTimeHour int `json:"preferred_time_hour,omitempty"`
	// PreferredTimeMinute holds the value of the "preferred_time_minute" field.
	PreferredTimeMinute int `json:"preferred_time_minute,omitempty"`
	// LastNotifiedAt holds the value of the "last_notified_at" field.
	LastNotifiedAt *time.Time `json:"last_notified_at,omitempty"`
	// IsActivated holds the value of the "is_activated" field.
	IsActivated bool `json:"is_activated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationConfigQuery when eager-loading is set.
	Edges                    NotificationConfigEdges `json:"edges"`
	user_notification_config *int
}

// NotificationConfigEdges holds the relations/edges for other nodes in the graph.
type NotificationConfigEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationConfigEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationconfig.FieldMonday, notificationconfig.FieldTuesday, notificationconfig.FieldWednesday, notificationconfig.FieldThursday, notificationconfig.FieldFriday, notificationconfig.FieldSaturday, notificationconfig.FieldSunday, notificationconfig.FieldIsActivated:
			values[i] = new(sql.NullBool)
		case notificationconfig.FieldID, notificationconfig.FieldPreferredTimeHour, notificationconfig.FieldPreferredTimeMinute:
			values[i] = new(sql.NullInt64)
		case notificationconfig.FieldLastNotifiedAt:
			values[i] = new(sql.NullTime)
		case notificationconfig.ForeignKeys[0]: // user_notification_config
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NotificationConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationConfig fields.
func (nc *NotificationConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nc.ID = int(value.Int64)
		case notificationconfig.FieldMonday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field monday", values[i])
			} else if value.Valid {
				nc.Monday = value.Bool
			}
		case notificationconfig.FieldTuesday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field tuesday", values[i])
			} else if value.Valid {
				nc.Tuesday = value.Bool
			}
		case notificationconfig.FieldWednesday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field wednesday", values[i])
			} else if value.Valid {
				nc.Wednesday = value.Bool
			}
		case notificationconfig.FieldThursday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field thursday", values[i])
			} else if value.Valid {
				nc.Thursday = value.Bool
			}
		case notificationconfig.FieldFriday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field friday", values[i])
			} else if value.Valid {
				nc.Friday = value.Bool
			}
		case notificationconfig.FieldSaturday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field saturday", values[i])
			} else if value.Valid {
				nc.Saturday = value.Bool
			}
		case notificationconfig.FieldSunday:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sunday", values[i])
			} else if value.Valid {
				nc.Sunday = value.Bool
			}
		case notificationconfig.FieldPreferredTimeHour:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_time_hour", values[i])
			} else if value.Valid {
				nc.PreferredTimeHour = int(value.Int64)
			}
		case notificationconfig.FieldPreferredTimeMinute:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field preferred_time_minute", values[i])
			} else if value.Valid {
				nc.PreferredTimeMinute = int(value.Int64)
			}
		case notificationconfig.FieldLastNotifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_notified_at", values[i])
			} else if value.Valid {
				nc.LastNotifiedAt = new(time.Time)
				*nc.LastNotifiedAt = value.Time
			}
		case notificationconfig.FieldIsActivated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_activated", values[i])
			} else if value.Valid {
				nc.IsActivated = value.Bool
			}
		case notificationconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_notification_config", value)
			} else if value.Valid {
				nc.user_notification_config = new(int)
				*nc.user_notification_config = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the NotificationConfig entity.
func (nc *NotificationConfig) QueryUser() *UserQuery {
	return (&NotificationConfigClient{config: nc.config}).QueryUser(nc)
}

// Update returns a builder for updating this NotificationConfig.
// Note that you need to call NotificationConfig.Unwrap() before calling this method if this NotificationConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (nc *NotificationConfig) Update() *NotificationConfigUpdateOne {
	return (&NotificationConfigClient{config: nc.config}).UpdateOne(nc)
}

// Unwrap unwraps the NotificationConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nc *NotificationConfig) Unwrap() *NotificationConfig {
	tx, ok := nc.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationConfig is not a transactional entity")
	}
	nc.config.driver = tx.drv
	return nc
}

// String implements the fmt.Stringer.
func (nc *NotificationConfig) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", nc.ID))
	builder.WriteString(", monday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Monday))
	builder.WriteString(", tuesday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Tuesday))
	builder.WriteString(", wednesday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Wednesday))
	builder.WriteString(", thursday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Thursday))
	builder.WriteString(", friday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Friday))
	builder.WriteString(", saturday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Saturday))
	builder.WriteString(", sunday=")
	builder.WriteString(fmt.Sprintf("%v", nc.Sunday))
	builder.WriteString(", preferred_time_hour=")
	builder.WriteString(fmt.Sprintf("%v", nc.PreferredTimeHour))
	builder.WriteString(", preferred_time_minute=")
	builder.WriteString(fmt.Sprintf("%v", nc.PreferredTimeMinute))
	if v := nc.LastNotifiedAt; v != nil {
		builder.WriteString(", last_notified_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", is_activated=")
	builder.WriteString(fmt.Sprintf("%v", nc.IsActivated))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationConfigs is a parsable slice of NotificationConfig.
type NotificationConfigs []*NotificationConfig

func (nc NotificationConfigs) config(cfg config) {
	for _i := range nc {
		nc[_i].config = cfg
	}
}
