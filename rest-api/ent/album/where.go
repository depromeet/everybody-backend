// Code generated by entc, DO NOT EDIT.

package album

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/depromeet/everybody-backend/rest-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FolderName applies equality check predicate on the "folder_name" field. It's identical to FolderNameEQ.
func FolderName(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolderName), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// FolderNameEQ applies the EQ predicate on the "folder_name" field.
func FolderNameEQ(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolderName), v))
	})
}

// FolderNameNEQ applies the NEQ predicate on the "folder_name" field.
func FolderNameNEQ(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFolderName), v))
	})
}

// FolderNameIn applies the In predicate on the "folder_name" field.
func FolderNameIn(vs ...string) predicate.Album {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Album(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFolderName), v...))
	})
}

// FolderNameNotIn applies the NotIn predicate on the "folder_name" field.
func FolderNameNotIn(vs ...string) predicate.Album {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Album(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFolderName), v...))
	})
}

// FolderNameGT applies the GT predicate on the "folder_name" field.
func FolderNameGT(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFolderName), v))
	})
}

// FolderNameGTE applies the GTE predicate on the "folder_name" field.
func FolderNameGTE(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFolderName), v))
	})
}

// FolderNameLT applies the LT predicate on the "folder_name" field.
func FolderNameLT(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFolderName), v))
	})
}

// FolderNameLTE applies the LTE predicate on the "folder_name" field.
func FolderNameLTE(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFolderName), v))
	})
}

// FolderNameContains applies the Contains predicate on the "folder_name" field.
func FolderNameContains(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFolderName), v))
	})
}

// FolderNameHasPrefix applies the HasPrefix predicate on the "folder_name" field.
func FolderNameHasPrefix(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFolderName), v))
	})
}

// FolderNameHasSuffix applies the HasSuffix predicate on the "folder_name" field.
func FolderNameHasSuffix(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFolderName), v))
	})
}

// FolderNameEqualFold applies the EqualFold predicate on the "folder_name" field.
func FolderNameEqualFold(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFolderName), v))
	})
}

// FolderNameContainsFold applies the ContainsFold predicate on the "folder_name" field.
func FolderNameContainsFold(v string) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFolderName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Album {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Album(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Album {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Album(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPicture applies the HasEdge predicate on the "picture" edge.
func HasPicture() predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PictureTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PictureTable, PictureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPictureWith applies the HasEdge predicate on the "picture" edge with a given conditions (other predicates).
func HasPictureWith(preds ...predicate.Picture) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PictureInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PictureTable, PictureColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Album) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Album) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Album) predicate.Album {
	return predicate.Album(func(s *sql.Selector) {
		p(s.Not())
	})
}
