// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/depromeet/everybody-backend/rest-api/ent/notificationconfig"
	"github.com/depromeet/everybody-backend/rest-api/ent/user"
)

// NotificationConfigCreate is the builder for creating a NotificationConfig entity.
type NotificationConfigCreate struct {
	config
	mutation *NotificationConfigMutation
	hooks    []Hook
}

// SetInterval sets the "interval" field.
func (ncc *NotificationConfigCreate) SetInterval(i int) *NotificationConfigCreate {
	ncc.mutation.SetInterval(i)
	return ncc
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (ncc *NotificationConfigCreate) SetNillableInterval(i *int) *NotificationConfigCreate {
	if i != nil {
		ncc.SetInterval(*i)
	}
	return ncc
}

// SetLastNotifiedAt sets the "last_notified_at" field.
func (ncc *NotificationConfigCreate) SetLastNotifiedAt(t time.Time) *NotificationConfigCreate {
	ncc.mutation.SetLastNotifiedAt(t)
	return ncc
}

// SetNillableLastNotifiedAt sets the "last_notified_at" field if the given value is not nil.
func (ncc *NotificationConfigCreate) SetNillableLastNotifiedAt(t *time.Time) *NotificationConfigCreate {
	if t != nil {
		ncc.SetLastNotifiedAt(*t)
	}
	return ncc
}

// SetIsActive sets the "is_active" field.
func (ncc *NotificationConfigCreate) SetIsActive(b bool) *NotificationConfigCreate {
	ncc.mutation.SetIsActive(b)
	return ncc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ncc *NotificationConfigCreate) SetNillableIsActive(b *bool) *NotificationConfigCreate {
	if b != nil {
		ncc.SetIsActive(*b)
	}
	return ncc
}

// SetID sets the "id" field.
func (ncc *NotificationConfigCreate) SetID(i int) *NotificationConfigCreate {
	ncc.mutation.SetID(i)
	return ncc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ncc *NotificationConfigCreate) SetUserID(id string) *NotificationConfigCreate {
	ncc.mutation.SetUserID(id)
	return ncc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ncc *NotificationConfigCreate) SetNillableUserID(id *string) *NotificationConfigCreate {
	if id != nil {
		ncc = ncc.SetUserID(*id)
	}
	return ncc
}

// SetUser sets the "user" edge to the User entity.
func (ncc *NotificationConfigCreate) SetUser(u *User) *NotificationConfigCreate {
	return ncc.SetUserID(u.ID)
}

// Mutation returns the NotificationConfigMutation object of the builder.
func (ncc *NotificationConfigCreate) Mutation() *NotificationConfigMutation {
	return ncc.mutation
}

// Save creates the NotificationConfig in the database.
func (ncc *NotificationConfigCreate) Save(ctx context.Context) (*NotificationConfig, error) {
	var (
		err  error
		node *NotificationConfig
	)
	ncc.defaults()
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotificationConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NotificationConfigCreate) SaveX(ctx context.Context) *NotificationConfig {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NotificationConfigCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NotificationConfigCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NotificationConfigCreate) defaults() {
	if _, ok := ncc.mutation.IsActive(); !ok {
		v := notificationconfig.DefaultIsActive
		ncc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NotificationConfigCreate) check() error {
	if _, ok := ncc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "is_active"`)}
	}
	return nil
}

func (ncc *NotificationConfigCreate) sqlSave(ctx context.Context) (*NotificationConfig, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ncc *NotificationConfigCreate) createSpec() (*NotificationConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationConfig{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notificationconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notificationconfig.FieldID,
			},
		}
	)
	if id, ok := ncc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ncc.mutation.Interval(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: notificationconfig.FieldInterval,
		})
		_node.Interval = value
	}
	if value, ok := ncc.mutation.LastNotifiedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notificationconfig.FieldLastNotifiedAt,
		})
		_node.LastNotifiedAt = value
	}
	if value, ok := ncc.mutation.IsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: notificationconfig.FieldIsActive,
		})
		_node.IsActive = value
	}
	if nodes := ncc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notificationconfig.UserTable,
			Columns: []string{notificationconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_notification_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotificationConfigCreateBulk is the builder for creating many NotificationConfig entities in bulk.
type NotificationConfigCreateBulk struct {
	config
	builders []*NotificationConfigCreate
}

// Save creates the NotificationConfig entities in the database.
func (nccb *NotificationConfigCreateBulk) Save(ctx context.Context) ([]*NotificationConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NotificationConfig, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NotificationConfigCreateBulk) SaveX(ctx context.Context) []*NotificationConfig {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NotificationConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NotificationConfigCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
