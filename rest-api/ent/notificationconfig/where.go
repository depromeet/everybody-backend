// Code generated by entc, DO NOT EDIT.

package notificationconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/depromeet/everybody-backend/rest-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Interval applies equality check predicate on the "interval" field. It's identical to IntervalEQ.
func Interval(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// LastNotifiedAt applies equality check predicate on the "last_notified_at" field. It's identical to LastNotifiedAtEQ.
func LastNotifiedAt(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNotifiedAt), v))
	})
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterval), v))
	})
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...int) predicate.NotificationConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterval), v...))
	})
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...int) predicate.NotificationConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterval), v...))
	})
}

// IntervalGT applies the GT predicate on the "interval" field.
func IntervalGT(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterval), v))
	})
}

// IntervalGTE applies the GTE predicate on the "interval" field.
func IntervalGTE(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterval), v))
	})
}

// IntervalLT applies the LT predicate on the "interval" field.
func IntervalLT(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterval), v))
	})
}

// IntervalLTE applies the LTE predicate on the "interval" field.
func IntervalLTE(v int) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterval), v))
	})
}

// IntervalIsNil applies the IsNil predicate on the "interval" field.
func IntervalIsNil() predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInterval)))
	})
}

// IntervalNotNil applies the NotNil predicate on the "interval" field.
func IntervalNotNil() predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInterval)))
	})
}

// LastNotifiedAtEQ applies the EQ predicate on the "last_notified_at" field.
func LastNotifiedAtEQ(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNotifiedAt), v))
	})
}

// LastNotifiedAtNEQ applies the NEQ predicate on the "last_notified_at" field.
func LastNotifiedAtNEQ(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastNotifiedAt), v))
	})
}

// LastNotifiedAtIn applies the In predicate on the "last_notified_at" field.
func LastNotifiedAtIn(vs ...time.Time) predicate.NotificationConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastNotifiedAt), v...))
	})
}

// LastNotifiedAtNotIn applies the NotIn predicate on the "last_notified_at" field.
func LastNotifiedAtNotIn(vs ...time.Time) predicate.NotificationConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastNotifiedAt), v...))
	})
}

// LastNotifiedAtGT applies the GT predicate on the "last_notified_at" field.
func LastNotifiedAtGT(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastNotifiedAt), v))
	})
}

// LastNotifiedAtGTE applies the GTE predicate on the "last_notified_at" field.
func LastNotifiedAtGTE(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastNotifiedAt), v))
	})
}

// LastNotifiedAtLT applies the LT predicate on the "last_notified_at" field.
func LastNotifiedAtLT(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastNotifiedAt), v))
	})
}

// LastNotifiedAtLTE applies the LTE predicate on the "last_notified_at" field.
func LastNotifiedAtLTE(v time.Time) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastNotifiedAt), v))
	})
}

// LastNotifiedAtIsNil applies the IsNil predicate on the "last_notified_at" field.
func LastNotifiedAtIsNil() predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastNotifiedAt)))
	})
}

// LastNotifiedAtNotNil applies the NotNil predicate on the "last_notified_at" field.
func LastNotifiedAtNotNil() predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastNotifiedAt)))
	})
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActive), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationConfig) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationConfig) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationConfig) predicate.NotificationConfig {
	return predicate.NotificationConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
