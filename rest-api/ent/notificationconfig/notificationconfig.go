// Code generated by entc, DO NOT EDIT.

package notificationconfig

const (
	// Label holds the string label denoting the notificationconfig type in the database.
	Label = "notification_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldLastNotifiedAt holds the string denoting the last_notified_at field in the database.
	FieldLastNotifiedAt = "last_notified_at"
	// FieldIsActivated holds the string denoting the is_activated field in the database.
	FieldIsActivated = "is_activated"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the notificationconfig in the database.
	Table = "notification_configs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "notification_configs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_notification_config"
)

// Columns holds all SQL columns for notificationconfig fields.
var Columns = []string{
	FieldID,
	FieldInterval,
	FieldLastNotifiedAt,
	FieldIsActivated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notification_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_notification_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActivated holds the default value on creation for the "is_activated" field.
	DefaultIsActivated bool
)
