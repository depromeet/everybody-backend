// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/depromeet/everybody-backend/rest-api/dto"
	mock "github.com/stretchr/testify/mock"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

// Configure provides a mock function with given fields: requestUser, body
func (_m *NotificationService) Configure(requestUser int, body *dto.ConfigureNotificationRequest) (*dto.NotificationConfigDto, error) {
	ret := _m.Called(requestUser, body)

	var r0 *dto.NotificationConfigDto
	if rf, ok := ret.Get(0).(func(int, *dto.ConfigureNotificationRequest) *dto.NotificationConfigDto); ok {
		r0 = rf(requestUser, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.NotificationConfigDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *dto.ConfigureNotificationRequest) error); ok {
		r1 = rf(requestUser, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: id
func (_m *NotificationService) GetConfig(id int) (*dto.NotificationConfigDto, error) {
	ret := _m.Called(id)

	var r0 *dto.NotificationConfigDto
	if rf, ok := ret.Get(0).(func(int) *dto.NotificationConfigDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.NotificationConfigDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigByUser provides a mock function with given fields: user
func (_m *NotificationService) GetConfigByUser(user int) (*dto.NotificationConfigDto, error) {
	ret := _m.Called(user)

	var r0 *dto.NotificationConfigDto
	if rf, ok := ret.Get(0).(func(int) *dto.NotificationConfigDto); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.NotificationConfigDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
