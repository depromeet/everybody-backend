// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ent "github.com/depromeet/everybody-backend/rest-api/ent"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// CreateNotificationConfig provides a mock function with given fields: config
func (_m *NotificationRepository) CreateNotificationConfig(config *ent.NotificationConfig) (*ent.NotificationConfig, error) {
	ret := _m.Called(config)

	var r0 *ent.NotificationConfig
	if rf, ok := ret.Get(0).(func(*ent.NotificationConfig) *ent.NotificationConfig); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.NotificationConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ent.NotificationConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *NotificationRepository) FindAll() ([]*ent.NotificationConfig, error) {
	ret := _m.Called()

	var r0 []*ent.NotificationConfig
	if rf, ok := ret.Get(0).(func() []*ent.NotificationConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.NotificationConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *NotificationRepository) FindById(id int) (*ent.NotificationConfig, error) {
	ret := _m.Called(id)

	var r0 *ent.NotificationConfig
	if rf, ok := ret.Get(0).(func(int) *ent.NotificationConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.NotificationConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUser provides a mock function with given fields: user
func (_m *NotificationRepository) FindByUser(user int) (*ent.NotificationConfig, error) {
	ret := _m.Called(user)

	var r0 *ent.NotificationConfig
	if rf, ok := ret.Get(0).(func(int) *ent.NotificationConfig); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.NotificationConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, config
func (_m *NotificationRepository) Update(id int, config *ent.NotificationConfig) (*ent.NotificationConfig, error) {
	ret := _m.Called(id, config)

	var r0 *ent.NotificationConfig
	if rf, ok := ret.Get(0).(func(int, *ent.NotificationConfig) *ent.NotificationConfig); ok {
		r0 = rf(id, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.NotificationConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *ent.NotificationConfig) error); ok {
		r1 = rf(id, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLastNotifiedAt provides a mock function with given fields: id, lastNotifiedAt
func (_m *NotificationRepository) UpdateLastNotifiedAt(id int, lastNotifiedAt time.Time) (*ent.NotificationConfig, error) {
	ret := _m.Called(id, lastNotifiedAt)

	var r0 *ent.NotificationConfig
	if rf, ok := ret.Get(0).(func(int, time.Time) *ent.NotificationConfig); ok {
		r0 = rf(id, lastNotifiedAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.NotificationConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, time.Time) error); ok {
		r1 = rf(id, lastNotifiedAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
