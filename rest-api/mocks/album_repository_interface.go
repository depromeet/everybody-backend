// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ent "github.com/depromeet/everybody-backend/rest-api/ent"
	mock "github.com/stretchr/testify/mock"
)

// AlbumRepositoryInterface is an autogenerated mock type for the AlbumRepositoryInterface type
type AlbumRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: album
func (_m *AlbumRepositoryInterface) Create(album *ent.Album) (*ent.Album, error) {
	ret := _m.Called(album)

	var r0 *ent.Album
	if rf, ok := ret.Get(0).(func(*ent.Album) *ent.Album); ok {
		r0 = rf(album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ent.Album) error); ok {
		r1 = rf(album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: albumID
func (_m *AlbumRepositoryInterface) Get(albumID int) (*ent.Album, error) {
	ret := _m.Called(albumID)

	var r0 *ent.Album
	if rf, ok := ret.Get(0).(func(int) *ent.Album); ok {
		r0 = rf(albumID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(albumID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUserID provides a mock function with given fields: userID
func (_m *AlbumRepositoryInterface) GetAllByUserID(userID int) ([]*ent.Album, error) {
	ret := _m.Called(userID)

	var r0 []*ent.Album
	if rf, ok := ret.Get(0).(func(int) []*ent.Album); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
