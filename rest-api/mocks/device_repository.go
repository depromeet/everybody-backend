// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ent "github.com/depromeet/everybody-backend/rest-api/ent"
	mock "github.com/stretchr/testify/mock"
)

// DeviceRepository is an autogenerated mock type for the DeviceRepository type
type DeviceRepository struct {
	mock.Mock
}

// CreateDevice provides a mock function with given fields: device
func (_m *DeviceRepository) CreateDevice(device *ent.Device) (*ent.Device, error) {
	ret := _m.Called(device)

	var r0 *ent.Device
	if rf, ok := ret.Get(0).(func(*ent.Device) *ent.Device); ok {
		r0 = rf(device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ent.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByDeviceToken provides a mock function with given fields: deviceToken
func (_m *DeviceRepository) FindByDeviceToken(deviceToken string) (*ent.Device, error) {
	ret := _m.Called(deviceToken)

	var r0 *ent.Device
	if rf, ok := ret.Get(0).(func(string) *ent.Device); ok {
		r0 = rf(deviceToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *DeviceRepository) FindById(id int) (*ent.Device, error) {
	ret := _m.Called(id)

	var r0 *ent.Device
	if rf, ok := ret.Get(0).(func(int) *ent.Device); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, device
func (_m *DeviceRepository) Update(id int, device *ent.Device) error {
	ret := _m.Called(id, device)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *ent.Device) error); ok {
		r0 = rf(id, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
