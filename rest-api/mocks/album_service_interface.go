// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/depromeet/everybody-backend/rest-api/dto"
	ent "github.com/depromeet/everybody-backend/rest-api/ent"

	mock "github.com/stretchr/testify/mock"
)

// AlbumServiceInterface is an autogenerated mock type for the AlbumServiceInterface type
type AlbumServiceInterface struct {
	mock.Mock
}

// CreateAlbum provides a mock function with given fields: userID, albumReq
func (_m *AlbumServiceInterface) CreateAlbum(userID int, albumReq *dto.AlbumRequest) (*ent.Album, error) {
	ret := _m.Called(userID, albumReq)

	var r0 *ent.Album
	if rf, ok := ret.Get(0).(func(int, *dto.AlbumRequest) *ent.Album); ok {
		r0 = rf(userID, albumReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *dto.AlbumRequest) error); ok {
		r1 = rf(userID, albumReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbum provides a mock function with given fields: albumID
func (_m *AlbumServiceInterface) GetAlbum(albumID int) (*ent.Album, []*ent.Picture, error) {
	ret := _m.Called(albumID)

	var r0 *ent.Album
	if rf, ok := ret.Get(0).(func(int) *ent.Album); ok {
		r0 = rf(albumID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Album)
		}
	}

	var r1 []*ent.Picture
	if rf, ok := ret.Get(1).(func(int) []*ent.Picture); ok {
		r1 = rf(albumID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*ent.Picture)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(albumID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllAlbums provides a mock function with given fields: userID
func (_m *AlbumServiceInterface) GetAllAlbums(userID int) ([]*ent.Album, error) {
	ret := _m.Called(userID)

	var r0 []*ent.Album
	if rf, ok := ret.Get(0).(func(int) []*ent.Album); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
