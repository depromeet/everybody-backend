// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/depromeet/everybody-backend/rest-api/dto"
	mock "github.com/stretchr/testify/mock"
)

// AlbumServiceInterface is an autogenerated mock type for the AlbumServiceInterface type
type AlbumServiceInterface struct {
	mock.Mock
}

// CreateAlbum provides a mock function with given fields: userID, albumReq
func (_m *AlbumServiceInterface) CreateAlbum(userID int, albumReq *dto.AlbumRequest) (*dto.AlbumDto, error) {
	ret := _m.Called(userID, albumReq)

	var r0 *dto.AlbumDto
	if rf, ok := ret.Get(0).(func(int, *dto.AlbumRequest) *dto.AlbumDto); ok {
		r0 = rf(userID, albumReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AlbumDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *dto.AlbumRequest) error); ok {
		r1 = rf(userID, albumReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlbum provides a mock function with given fields: userID, albumID
func (_m *AlbumServiceInterface) DeleteAlbum(userID int, albumID int) error {
	ret := _m.Called(userID, albumID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, albumID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlbum provides a mock function with given fields: userID, albumID
func (_m *AlbumServiceInterface) GetAlbum(userID int, albumID int) (*dto.AlbumDto, error) {
	ret := _m.Called(userID, albumID)

	var r0 *dto.AlbumDto
	if rf, ok := ret.Get(0).(func(int, int) *dto.AlbumDto); ok {
		r0 = rf(userID, albumID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AlbumDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, albumID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAlbums provides a mock function with given fields: userID
func (_m *AlbumServiceInterface) GetAllAlbums(userID int) (dto.AlbumsDto, error) {
	ret := _m.Called(userID)

	var r0 dto.AlbumsDto
	if rf, ok := ret.Get(0).(func(int) dto.AlbumsDto); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dto.AlbumsDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlbum provides a mock function with given fields: userID, albumID, body
func (_m *AlbumServiceInterface) UpdateAlbum(userID int, albumID int, body *dto.UpdateAlbumRequest) (*dto.AlbumDto, error) {
	ret := _m.Called(userID, albumID, body)

	var r0 *dto.AlbumDto
	if rf, ok := ret.Get(0).(func(int, int, *dto.UpdateAlbumRequest) *dto.AlbumDto); ok {
		r0 = rf(userID, albumID, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AlbumDto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *dto.UpdateAlbumRequest) error); ok {
		r1 = rf(userID, albumID, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
