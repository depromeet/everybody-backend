// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ent "github.com/depromeet/everybody-backend/rest-api/ent"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user *ent.User) (*ent.User, error) {
	ret := _m.Called(user)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(*ent.User) *ent.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ent.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *UserRepository) FindById(id int) (*ent.User, error) {
	ret := _m.Called(id)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(int) *ent.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNicknameContainingOrderByNicknameDesc provides a mock function with given fields: nickname
func (_m *UserRepository) FindByNicknameContainingOrderByNicknameDesc(nickname string) (*ent.User, error) {
	ret := _m.Called(nickname)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(string) *ent.User); ok {
		r0 = rf(nickname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nickname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, user
func (_m *UserRepository) Update(id int, user *ent.User) (*ent.User, error) {
	ret := _m.Called(id, user)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(int, *ent.User) *ent.User); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *ent.User) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfileImage provides a mock function with given fields: id, profileImage
func (_m *UserRepository) UpdateProfileImage(id int, profileImage string) (*ent.User, error) {
	ret := _m.Called(id, profileImage)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(int, string) *ent.User); ok {
		r0 = rf(id, profileImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, profileImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
